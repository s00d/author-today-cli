import fs from 'fs-extra';
import path from 'path';
import axios from 'axios';
import chalk from 'chalk';
import { AudioBook, AudioChapter, DownloadOptions, DownloadProgress } from '../types';

/**
 * –ü—Ä–æ—Å—Ç–æ–π —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 */
class Semaphore {
  private permits: number;
  private waitingQueue: (() => void)[] = [];

  constructor(permits: number) {
    this.permits = permits;
  }

  async acquire(): Promise<void> {
    if (this.permits > 0) {
      this.permits--;
      return;
    }

    return new Promise<void>((resolve) => {
      this.waitingQueue.push(resolve);
    });
  }

  release(): void {
    if (this.waitingQueue.length > 0) {
      const resolve = this.waitingQueue.shift()!;
      resolve();
    } else {
      this.permits++;
    }
  }
}

export class DownloadManager {
  private api: any;

  constructor(api: any) {
    this.api = api;
  }

  /**
   * –°–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ–∫–Ω–∏–≥—É
   */
  async downloadAudioBook(
    book: AudioBook, 
    options: DownloadOptions,
    onProgress?: (progress: DownloadProgress) => void
  ): Promise<void> {
    const bookDir = path.join(options.outputDir, this.sanitizeFileName(book.title));
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∫–Ω–∏–≥–∏
    await fs.ensureDir(bookDir);

    // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏
    await this.cleanupTempFiles(bookDir);

    // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–Ω–∏–≥–µ
    await this.saveBookInfo(book, bookDir);

    // –°–∫–∞—á–∏–≤–∞–µ–º –æ–±–ª–æ–∂–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å –∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (book.coverUrl && !await this.coverExists(bookDir)) {
      await this.downloadCover(book.coverUrl, bookDir);
    }

    // –°–∫–∞—á–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
    await this.downloadAdditionalFiles(book, bookDir);

    // –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    let chapters = book.chapters || [];
    if (chapters.length === 0) {
      chapters = await this.api.getAudioChapters(book.id);
    }

    console.log(chalk.blue(`–ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ: ${book.title}`));
    console.log(chalk.gray(`–ê–≤—Ç–æ—Ä: ${book.authorFIO}`));
    console.log(chalk.gray(`–ì–ª–∞–≤: ${chapters.length}`));
    console.log(chalk.gray(`–ü–∞–ø–∫–∞: ${bookDir}`));
    console.log('');

    // –°–∫–∞—á–∏–≤–∞–µ–º –≥–ª–∞–≤—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    await this.downloadChaptersParallel(book.id, chapters, bookDir, options, onProgress);

    console.log(chalk.green(`\n‚úì –ê—É–¥–∏–æ–∫–Ω–∏–≥–∞ "${book.title}" —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–∞!`));
  }

  /**
   * –°–∫–∞—á–∞—Ç—å –≥–ª–∞–≤—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
   */
  private async downloadChaptersParallel(
    bookId: number,
    chapters: AudioChapter[],
    bookDir: string,
    options: DownloadOptions,
    onProgress?: (progress: DownloadProgress) => void
  ): Promise<void> {
    const concurrentDownloads = options.concurrentDownloads || 3;
    const chaptersToDownload: { chapter: AudioChapter; index: number; path: string }[] = [];

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–ª–∞–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    for (let i = 0; i < chapters.length; i++) {
      const chapter = chapters[i];
      const chapterPath = path.join(bookDir, `${String(i + 1).padStart(3, '0')}. ${this.sanitizeFileName(chapter.title)}.mp3`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
      if (options.skipExisting && await fs.pathExists(chapterPath)) {
        console.log(chalk.yellow(`–ü—Ä–æ–ø—É—Å–∫–∞–µ–º: ${chapter.title} (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)`));
        continue;
      }

      chaptersToDownload.push({
        chapter,
        index: i,
        path: chapterPath
      });
    }

    if (chaptersToDownload.length === 0) {
      console.log(chalk.green('–í—Å–µ –≥–ª–∞–≤—ã —É–∂–µ —Å–∫–∞—á–∞–Ω—ã!'));
      return;
    }

    console.log(chalk.blue(`–°–∫–∞—á–∏–≤–∞–µ–º ${chaptersToDownload.length} –≥–ª–∞–≤ –≤ ${concurrentDownloads} –ø–æ—Ç–æ–∫–æ–≤...`));

    // –°–æ–∑–¥–∞–µ–º —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
    const semaphore = new Semaphore(concurrentDownloads);
    
    // –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∑–æ–∫
    let completedChapters = 0;
    const totalChapters = chaptersToDownload.length;
    const activeDownloads = new Map<string, { chapter: AudioChapter; progress: number }>();
    
    // –°–∫–∞—á–∏–≤–∞–µ–º –≥–ª–∞–≤—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    const downloadPromises = chaptersToDownload.map(async ({ chapter, index, path }) => {
      await semaphore.acquire();
      
      let attempts = 0;
      const maxAttempts = options.maxRetries || 3;
      
      while (attempts < maxAttempts) {
        try {
          await this.downloadChapter(bookId, chapter, path, (progress) => {
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥–ª–∞–≤—ã
            activeDownloads.set(chapter.id.toString(), { chapter, progress: progress.percentage });
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
            const activeProgresses = Array.from(activeDownloads.values())
              .map(({ chapter: ch, progress: p }) => `${ch.title}: ${p}%`)
              .join(' ');
            
            const overallProgress = Math.round((completedChapters / totalChapters) * 100);
            process.stdout.write(`\r${chalk.blue('–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å')}: ${overallProgress}% (${completedChapters}/${totalChapters}) - ${activeProgresses}`);
          });
          
          // –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
          activeDownloads.delete(chapter.id.toString());
          completedChapters++;
          
          console.log(`\n${chalk.green(`‚úì –°–∫–∞—á–∞–Ω–æ: ${chapter.title} (${completedChapters}/${totalChapters})`)}`);
          break; // –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
          
        } catch (error) {
          attempts++;
          activeDownloads.delete(chapter.id.toString());
          
          if (attempts < maxAttempts) {
            console.log(`\n${chalk.yellow(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: ${chapter.title} (–ø–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts})`)}`);
            console.log(chalk.yellow(`  ${error}`));
            console.log(chalk.blue(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...`));
            
            // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            await new Promise(resolve => setTimeout(resolve, 2000));
          } else {
            completedChapters++;
            console.log(`\n${chalk.red(`‚úó –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: ${chapter.title} (${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫)`)}`);
            console.log(chalk.red(`  ${error}`));
          }
        }
      }
      
      semaphore.release();
    });

    await Promise.all(downloadPromises);
    console.log(`\n${chalk.green('‚úì –í—Å–µ –≥–ª–∞–≤—ã —Å–∫–∞—á–∞–Ω—ã!')}`);
  }

  /**
   * –°–∫–∞—á–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é –≥–ª–∞–≤—É
   */
  private async downloadChapter(
    bookId: number,
    chapter: AudioChapter,
    outputPath: string,
    onProgress?: (progress: DownloadProgress) => void
  ): Promise<void> {
    // –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    const audioUrl = await this.api.getChapterAudioUrl(bookId, chapter.id);
    if (!audioUrl) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è');
    }

    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    const tempPath = `${outputPath}.tmp`;
    
    // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    const response = await axios({
      method: 'GET',
      url: audioUrl,
      responseType: 'stream',
    });

    const totalSize = parseInt(response.headers['content-length'] || '0');
    let downloadedSize = 0;

    const writer = fs.createWriteStream(tempPath);
    
    response.data.on('data', (chunk: Buffer) => {
      downloadedSize += chunk.length;
      
      if (onProgress) {
        onProgress({
          chapterId: chapter.id,
          chapterTitle: chapter.title,
          downloaded: downloadedSize,
          total: totalSize,
          percentage: totalSize > 0 ? Math.round((downloadedSize / totalSize) * 100) : 0
        });
      }
    });

    return new Promise((resolve, reject) => {
      response.data.pipe(writer);
      
      writer.on('finish', async () => {
        try {
          // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π
          await fs.move(tempPath, outputPath);
          resolve();
        } catch (error) {
          reject(error);
        }
      });
      
      writer.on('error', (error) => {
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
        fs.unlink(tempPath).catch(() => {});
        reject(error);
      });
      response.data.on('error', reject);
    });
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ –≤ —Ñ–∞–π–ª
   */
  private async saveBookInfo(book: AudioBook, bookDir: string): Promise<void> {
    const info = {
      title: book.title,
      author: book.authorFIO,
      annotation: book.annotation,
      genre: book.genre,
      year: book.year,
      downloadedAt: new Date().toISOString(),
      chapters: book.chapters?.map(ch => ({
        id: ch.id,
        title: ch.title,
        duration: ch.duration,
        order: ch.order
      }))
    };

    await fs.writeJSON(path.join(bookDir, 'book-info.json'), info, { spaces: 2 });
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
   */
  private sanitizeFileName(fileName: string): string {
    return fileName
      .replace(/[<>:"/\\|?*]/g, '')
      .replace(/\s+/g, ' ')
      .trim();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–∫–∞—á–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏
   */
  async getDownloadedBooks(outputDir: string): Promise<string[]> {
    try {
      const dirs = await fs.readdir(outputDir);
      const downloadedBooks: string[] = [];

      for (const dir of dirs) {
        const bookPath = path.join(outputDir, dir);
        const stat = await fs.stat(bookPath);
        
        if (stat.isDirectory()) {
          const infoPath = path.join(bookPath, 'book-info.json');
          if (await fs.pathExists(infoPath)) {
            downloadedBooks.push(dir);
          }
        }
      }

      return downloadedBooks;
    } catch (error) {
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∞—á–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–µ
   */
  async getDownloadedBookInfo(outputDir: string, bookName: string): Promise<any> {
    try {
      const infoPath = path.join(outputDir, bookName, 'book-info.json');
      return await fs.readJSON(infoPath);
    } catch (error) {
      return null;
    }
  }

  /**
   * –°–∫–∞—á–∞—Ç—å –æ–±–ª–æ–∂–∫—É –∫–Ω–∏–≥–∏
   */
  private async downloadCover(coverUrl: string, bookDir: string): Promise<void> {
    try {
      console.log(chalk.blue('üì∏ –°–∫–∞—á–∏–≤–∞–µ–º –æ–±–ª–æ–∂–∫—É...'));
      
      const response = await axios.get(coverUrl, {
        responseType: 'stream',
        timeout: 30000
      });

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ URL –∏–ª–∏ Content-Type
      let extension = '.jpg';
      if (coverUrl.includes('.png')) {
        extension = '.png';
      } else if (coverUrl.includes('.webp')) {
        extension = '.webp';
      } else if (response.headers['content-type']?.includes('png')) {
        extension = '.png';
      } else if (response.headers['content-type']?.includes('webp')) {
        extension = '.webp';
      }

      const coverPath = path.join(bookDir, `cover${extension}`);
      const tempCoverPath = `${coverPath}.tmp`;
      const writer = fs.createWriteStream(tempCoverPath);
      
      response.data.pipe(writer);

      return new Promise((resolve, reject) => {
        writer.on('finish', async () => {
          try {
            // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π
            await fs.move(tempCoverPath, coverPath);
            console.log(chalk.green('‚úÖ –û–±–ª–æ–∂–∫–∞ —Å–∫–∞—á–∞–Ω–∞'));
            resolve();
          } catch (error) {
            reject(error);
          }
        });
        writer.on('error', (error) => {
          // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
          fs.unlink(tempCoverPath).catch(() => {});
          reject(error);
        });
      });
    } catch (error) {
      console.log(chalk.yellow('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –æ–±–ª–æ–∂–∫—É'));
    }
  }

  /**
   * –°–∫–∞—á–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
   */
  private async downloadAdditionalFiles(book: AudioBook, bookDir: string): Promise<void> {
    try {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
      // –ù–∞–ø—Ä–∏–º–µ—Ä, –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏, –ø—Ä–µ–≤—å—é –∏ —Ç.–¥.
      
      if (book.annotation) {
        const annotationPath = path.join(bookDir, 'annotation.txt');
        await fs.writeFile(annotationPath, book.annotation, 'utf8');
        console.log(chalk.green('üìÑ –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞'));
      }
    } catch (error) {
      console.log(chalk.yellow('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã'));
    }
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
   */
  private async cleanupTempFiles(bookDir: string): Promise<void> {
    try {
      const files = await fs.readdir(bookDir);
      for (const file of files) {
        if (file.endsWith('.tmp')) {
          const tempPath = path.join(bookDir, file);
          await fs.unlink(tempPath);
          console.log(chalk.yellow(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${file}`));
        }
      }
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–±–ª–æ–∂–∫–∏
   */
  private async coverExists(bookDir: string): Promise<boolean> {
    const extensions = ['.jpg', '.png', '.webp'];
    for (const ext of extensions) {
      const coverPath = path.join(bookDir, `cover${ext}`);
      if (await fs.pathExists(coverPath)) {
        return true;
      }
    }
    return false;
  }
}
