#!/usr/bin/env node

import { Command } from 'commander';
import inquirer from 'inquirer';
import chalk from 'chalk';
import fs from 'fs-extra';
import { AuthorTodayAPI, LoginData } from './services/api';
import { DownloadManager } from './services/download';
import { AudioBook, DownloadOptions } from './types';
import { search } from '@inquirer/prompts';
import packageJson from '../package.json';

const program = new Command();
const api = new AuthorTodayAPI();
const downloadManager = new DownloadManager(api);

program
  .name('author-today-cli')
  .description('CLI –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ–∫–Ω–∏–≥ —Å Author Today')
  .version(packageJson.version);

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
program
  .command('login')
  .description('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ')
  .action(async () => {
    try {
      await loginUser();
    } catch (error) {
      console.error(chalk.red('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error));
      process.exit(1);
    }
  });

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
program
  .command('logout')
  .description('–í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã')
  .action(async () => {
    try {
      await api.logout();
    } catch (error) {
      console.error(chalk.red('–û—à–∏–±–∫–∞:', error));
      process.exit(1);
    }
  });

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
program
  .command('status')
  .description('–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
  .action(async () => {
    try {
      await showAuthStatus();
    } catch (error) {
      console.error(chalk.red('–û—à–∏–±–∫–∞:', error));
      process.exit(1);
    }
  });

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ–∫–Ω–∏–≥
program
  .command('search')
  .description('–ü–æ–∏—Å–∫ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ–∫–Ω–∏–≥')
  .option('-q, --query <query>', '–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å')
  .option('-o, --output <dir>', '–ü–∞–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è', './downloads')
  .option('-c, --concurrent <number>', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫', '3')
  .option('-r, --retries <number>', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ', '3')
  .action(async (options) => {
    try {
      await searchAndDownload(options);
    } catch (error) {
      console.error(chalk.red('–û—à–∏–±–∫–∞:', error));
      process.exit(1);
    }
  });

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥
program
  .command('list-downloaded')
  .description('–ü–æ–∫–∞–∑–∞—Ç—å —Å–∫–∞—á–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏')
  .option('-o, --output <dir>', '–ü–∞–ø–∫–∞ —Å –∑–∞–≥—Ä—É–∑–∫–∞–º–∏', './downloads')
  .action(async (options) => {
    try {
      await listDownloadedBooks(options.output);
    } catch (error) {
      console.error(chalk.red('–û—à–∏–±–∫–∞:', error));
      process.exit(1);
    }
  });

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–Ω–∏–≥–∏
program
  .command('download <bookId>')
  .description('–°–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ–∫–Ω–∏–≥—É –ø–æ ID')
  .option('-o, --output <dir>', '–ü–∞–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è', './downloads')
  .action(async (bookId, options) => {
    try {
      await downloadBookById(parseInt(bookId), options);
    } catch (error) {
      console.error(chalk.red('–û—à–∏–±–∫–∞:', error));
      process.exit(1);
    }
  });

async function loginUser(): Promise<void> {
  console.log(chalk.blue('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Author Today'));
  
  const { login, password } = await inquirer.prompt([
    {
      type: 'input',
      name: 'login',
      message: '–õ–æ–≥–∏–Ω –∏–ª–∏ email:',
      validate: (input) => input.length > 0 || '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω'
    },
    {
      type: 'password',
      name: 'password',
      message: '–ü–∞—Ä–æ–ª—å:',
      mask: '*',
      validate: (input) => input.length > 0 || '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å'
    }
  ]);

  try {
    console.log(chalk.blue('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...'));
    let loginData: LoginData = { login, password };
    let response = await api.login(loginData);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ 2FA
    if (response.data.twoFactorEnabled && !response.data.token) {
      console.log(chalk.yellow('‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–¥ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏'));
      
      const { code } = await inquirer.prompt([
        {
          type: 'input',
          name: 'code',
          message: '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:',
          validate: (input) => input.length > 0 || '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥'
        }
      ]);
      
      // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –∫–æ–¥–æ–º
      loginData.code = code;
      response = await api.login(loginData);
    }
    
    if (response.data.token) {
      console.log(chalk.green('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!'));
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      try {
        const userResponse = await api.getCurrentUser();
        if (userResponse.data && typeof userResponse.data === 'object') {
          const userData = userResponse.data as Record<string, unknown>;
          const nickname = userData.nickname as string;
          const userLogin = userData.login as string;
          const displayName = nickname || userLogin || login;
          console.log(chalk.green(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${displayName}!`));
        }
      } catch (error) {
        console.log(chalk.green(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${login}!`));
      }
    }
  } catch (error: unknown) {
    console.log(chalk.red('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:'));
    const axiosError = error as { response?: { data?: { message?: string; code?: string; invalidFields?: Record<string, string[]> } } };
    const apiError = axiosError.response?.data;
    
    if (apiError?.code === 'InvalidRequestFields' && apiError.invalidFields) {
      console.log(chalk.red('–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:'));
      Object.entries(apiError.invalidFields).forEach(([field, messages]) => {
        console.log(chalk.red(`${field}: ${messages.join(', ')}`));
      });
    } else if (apiError?.message) {
      console.log(chalk.red(apiError.message));
    } else {
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      console.log(chalk.red(errorMessage));
    }
    throw error;
  }
}

async function showAuthStatus(): Promise<void> {
  if (api.isAuthenticated()) {
    console.log(chalk.green('‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã'));
    try {
      const userResponse = await api.getCurrentUser();
      if (userResponse.data && typeof userResponse.data === 'object') {
        const userData = userResponse.data as Record<string, unknown>;
        const nickname = userData.nickname as string;
        const login = userData.login as string;
        const displayName = nickname || login || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        console.log(chalk.green(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${displayName}`));
      } else {
        console.log(chalk.green('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'));
      }
    } catch (error) {
      console.log(chalk.green('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'));
    }
  } else {
    console.log(chalk.red('‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã'));
    console.log(chalk.yellow('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É "login" –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'));
  }
}

async function ensureAuthenticated(): Promise<void> {
  if (!api.isAuthenticated()) {
    console.log(chalk.yellow('‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'));
    await loginUser();
  }
}

async function searchAndDownload(options: { output: string; query?: string; concurrent?: string; retries?: string }) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
  await ensureAuthenticated();
  
  console.log(chalk.blue('üîç –ü–æ–∏—Å–∫ –∞—É–¥–∏–æ–∫–Ω–∏–≥...'));
  
  // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
  await fs.ensureDir(options.output);

  let allBooks: AudioBook[] = [];
  let currentPage = 1;
  const pageSize = 50;
  let hasMorePages = true;

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  while (hasMorePages) {
    console.log(chalk.gray(`–ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É ${currentPage}...`));
    
    let pageBooks: AudioBook[] = [];
    
    if (options.query) {
      pageBooks = await api.searchAudioBooks(options.query, currentPage, pageSize);
    } else {
      pageBooks = await api.getAudioBooks(currentPage, pageSize);
    }

    if (pageBooks.length === 0) {
      hasMorePages = false;
    } else {
      allBooks = allBooks.concat(pageBooks);
      
      // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ –∫–Ω–∏–≥ —á–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
      if (pageBooks.length < pageSize) {
        hasMorePages = false;
      } else {
        currentPage++;
      }
    }
  }

  if (allBooks.length === 0) {
    console.log(chalk.yellow('–ê—É–¥–∏–æ–∫–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'));
    return;
  }

  console.log(chalk.green(`\nüìö –ù–∞–π–¥–µ–Ω–æ –∞—É–¥–∏–æ–∫–Ω–∏–≥: ${allBooks.length}`));

  const selectedBook = await search({
    message: '–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ–∫–Ω–∏–≥—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:',
    source: async (input) => {
      if (!input) {
        return allBooks.map(book => {
          // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          let name = `${chalk.cyan(book.title)} - ${chalk.yellow(book.authorFIO)}`;
          
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ä–∞–∑–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
          const details = [];
          if (book.reciter) {
            details.push(`${chalk.magenta(`–ß—Ç–µ—Ü: ${book.reciter}`)}`);
          }
          if (book.seriesTitle) {
            details.push(`${chalk.blue(`–°–µ—Ä–∏—è: ${book.seriesTitle}`)}`);
          }
          if (book.isFinished) {
            details.push(`${chalk.green('‚úì –ó–∞–≤–µ—Ä—à–µ–Ω–∞')}`);
          }
          
          if (details.length > 0) {
            name += ` (${details.join(', ')})`;
          }
          
          return {
            name,
            value: book
          };
        });
      }

      const filtered = allBooks.filter(book => 
        book.title.toLowerCase().includes(input.toLowerCase()) ||
        book.authorFIO.toLowerCase().includes(input.toLowerCase()) ||
        (book.reciter && book.reciter.toLowerCase().includes(input.toLowerCase())) ||
        (book.seriesTitle && book.seriesTitle.toLowerCase().includes(input.toLowerCase()))
      );
      
      return filtered.map(book => {
        // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        let name = `${chalk.cyan(book.title)} - ${chalk.yellow(book.authorFIO)}`;
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ä–∞–∑–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
        const details = [];
        if (book.reciter) {
          details.push(`${chalk.magenta(`–ß—Ç–µ—Ü: ${book.reciter}`)}`);
        }
        if (book.seriesTitle) {
          details.push(`${chalk.blue(`–°–µ—Ä–∏—è: ${book.seriesTitle}`)}`);
        }
        if (book.isFinished) {
          details.push(`${chalk.green('‚úì –ó–∞–≤–µ—Ä—à–µ–Ω–∞')}`);
        }
        
        if (details.length > 0) {
          name += ` (${details.join(', ')})`;
        }
        
        return {
          name,
          value: book
        };
      });
    }
  });
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–Ω–∏–≥–∏
  console.log(chalk.blue('üìñ –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–Ω–∏–≥–∏...'));
  const bookDetails = await api.getAudioBookDetails(selectedBook.id);
  
  if (!bookDetails) {
    console.log(chalk.red('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–Ω–∏–≥–∏'));
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤—ã
  const chapters = await api.getAudioChapters(selectedBook.id);
  bookDetails.chapters = chapters;

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
  const downloadOptions: DownloadOptions = {
    outputDir: options.output,
    quality: 'high',
    skipExisting: true,
    concurrentDownloads: parseInt(options.concurrent || '3'),
    maxRetries: parseInt(options.retries || '3')
  };

  // –°–∫–∞—á–∏–≤–∞–µ–º –∫–Ω–∏–≥—É
  await downloadManager.downloadAudioBook(bookDetails, downloadOptions);
}

async function listDownloadedBooks(outputDir: string) {
  console.log(chalk.blue('üìö –°–∫–∞—á–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏:'));
  
  const downloadedBooks = await downloadManager.getDownloadedBooks(outputDir);
  
  if (downloadedBooks.length === 0) {
    console.log(chalk.yellow('–°–∫–∞—á–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'));
    return;
  }

  for (const bookName of downloadedBooks) {
    const bookInfo = await downloadManager.getDownloadedBookInfo(outputDir, bookName);
    
    if (bookInfo) {
      console.log(chalk.green(`üìñ ${bookInfo.title}`));
      console.log(chalk.gray(`   –ê–≤—Ç–æ—Ä: ${bookInfo.author}`));
      console.log(chalk.gray(`   –°–∫–∞—á–∞–Ω–æ: ${new Date(bookInfo.downloadedAt).toLocaleDateString()}`));
      console.log(chalk.gray(`   –ì–ª–∞–≤: ${bookInfo.chapters?.length || 0}`));
      console.log('');
    }
  }
}

async function downloadBookById(bookId: number, options: { output: string }) {
  console.log(chalk.blue(`üìñ –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ ID: ${bookId}`));
  
  const bookDetails = await api.getAudioBookDetails(bookId);
  
  if (!bookDetails) {
    console.log(chalk.red('–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'));
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤—ã
  const chapters = await api.getAudioChapters(bookId);
  bookDetails.chapters = chapters;

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
  const downloadOptions: DownloadOptions = {
    outputDir: options.output,
    quality: 'high',
    skipExisting: true,
    concurrentDownloads: 3
  };

  // –°–∫–∞—á–∏–≤–∞–µ–º –∫–Ω–∏–≥—É
  await downloadManager.downloadAudioBook(bookDetails, downloadOptions);
}

async function showInteractiveMenu() {
  console.log(chalk.blue('üéß Author Today CLI'));
  console.log(chalk.gray('–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é\n'));

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  if (api.isAuthenticated()) {
    console.log(chalk.green('‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã'));
  } else {
    console.log(chalk.red('‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã'));
  }
  console.log('');

  const choices: { name: string; value: string }[] = [];

  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  if (api.isAuthenticated()) {
    choices.push(
      { name: 'üîç –ü–æ–∏—Å–∫ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ–∫–Ω–∏–≥', value: 'search' },
      { name: 'üìñ –°–∫–∞—á–∞—Ç—å –∫–Ω–∏–≥—É –ø–æ ID', value: 'download' },
      { name: 'üíæ –ü–æ–∫–∞–∑–∞—Ç—å —Å–∫–∞—á–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏', value: 'list-downloaded' },
      { name: 'üë§ –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', value: 'status' },
      { name: 'üö™ –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', value: 'logout' }
    );
  } else {
    choices.push({ name: 'üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', value: 'login' });
  }

  choices.push({ name: '‚ùå –í—ã—Ö–æ–¥', value: 'exit' });

  const { action } = await inquirer.prompt([
    {
      type: 'list',
      name: 'action',
      message: '–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?',
      choices
    }
  ]);

  switch (action) {
    case 'login':
      await loginUser();
      break;
    case 'logout':
      await api.logout();
      break;
    case 'status':
      await showAuthStatus();
      break;
    case 'search':
      await searchAndDownload({ output: './downloads' });
      break;
    case 'list-downloaded':
      await listDownloadedBooks('./downloads');
      break;
    case 'download':
      const { bookId } = await inquirer.prompt([
        {
          type: 'input',
          name: 'bookId',
          message: '–í–≤–µ–¥–∏—Ç–µ ID –∫–Ω–∏–≥–∏:',
          validate: (input) => !isNaN(parseInt(input)) || '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID'
        }
      ]);
      await downloadBookById(parseInt(bookId), { output: './downloads' });
      break;
    case 'exit':
      console.log(chalk.green('–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã'));
      process.exit(0);
  }
}

// –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω–æ –±–µ–∑ –∫–æ–º–∞–Ω–¥, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
if (process.argv.length === 2) {
  showInteractiveMenu().catch(console.error);
} else {
  program.parse();
}
